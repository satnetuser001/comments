2024.04.16
Familiarization with the technical task.
Learning of the functionality MySQL Workbench.
Created UML database diagram in MySQL Workbench and saved in a directory: comments/1-documentation/uml.

2024.04.17
Added some changes to the UML database diagram.
Initialized git repository:
	git init, git add ., git commit
Pushed repository to: github.com/satnetuser001/comments. Further work with Git will not be described, look at the commits.
Create database:
	CREATE DATABASE comments
	CHARACTER SET utf8mb4
	COLLATE utf8mb4_unicode_ci;
Create database user:
	CREATE USER 'comments_app'@'localhost' IDENTIFIED BY 'standart';
	the password is hidden because the development log will be on GitHub.
Grant privileges to database user:
	GRANT ALL PRIVILEGES ON comments.* TO 'comments_app'@'localhost';
Installed Laravel application:
	composer create-project --prefer-dist laravel/laravel .
!!!There was an error in the sequence of actions. The Laravel application cannot be installed in a non-empty directory. I had to temporarily transfer existing files.
Added database connection settings to the .env file.
Created migrations according to the UML diagram.
Applied the migrations.
Dumped DB in MYSQL into comments/1-documentation/mysqlDumpDB folder:
	mysqldump -uroot -p comments > comments.sql

2024.04.18
Make models for a tables comments and files:
	php artisan make:model Comment
	php artisan make:model File
Defined the fields available for mass assignment in models Comment and File.
Added one-to-many relationship methods between models User and Comment.
Added one-to-many relationship methods between models Comment and File.
Created a new seeder:
	php artisan make:seeder UsersCommentsSeeder
Added seeder functionality for populating the "Users" and "Comments" tables.
The database is filled with test data.

2024.04.19
Dumped DB with test data in MYSQL into comments/1-documentation/mysqlDumpDB folder:
	mysqldump -uroot -p comments > comments.sql
Created a Comment Controller with CRUD functionality:
	php artisan make:controller CommentController --resource

Adding a "Home Page" to the application to display all comments:
Created a Route.
Created a View "Home Page":
	php artisan make:view homePage
	php artisan make:view includes.commentTree
Into CommentController index method added logic.

Added pagination on "Home Page"

2024.04.21
The database is filled with more test data to test a pagination:
	php artisan migrate:fresh --seed
Dumped DB with test data in MYSQL into comments/1-documentation/mysqlDumpDB folder:
	mysqldump -uroot -p comments > comments.sql
Started making "add comment" functionality.

2024.04.22
Regenerate database test data with different timestamps for each comment:
	php artisan migrate:fresh --seed
Dumped DB with test data in MYSQL into comments/1-documentation/mysqlDumpDB folder:
	mysqldump -uroot -p comments > comments.sql
Finished "add comment" functionality without validation and CAPTCHA.

2024.04.23
Added error message CSS style on Create page.
Comments validation will be done using Form Requests.
Create Form Requests:
	php artisan make:request StoreCommentRequest
Added rules and error messages to StoreCommentRequest class.
Changed the CommentController 'store' method to use validated data.

CAPTCHA. Because I have no experience with CAPTCHA, I’ll make a separate branch for it in Git:
	git checkout -b CAPTCHA
Learning CAPTCHA.

2024.04.24
CAPTCHA. I choose between Google reCAPTCHA and bonecms/laravel-captcha package. IMHO , the laravel-captcha is more suitable for the test task conditions (https://github.com/igoshev/laravel-captcha).
Install laravel-captcha:
	composer require bonecms/laravel-captcha
!!!Failed. bonecms/laravel-captcha package does not work with Laravel 11.

Make a new branch in Git:
	git checkout -b CAPTCHA_mlk9
Install other laravel-captcha (https://github.com/mlk9/captcha-laravel):
	composer require mlk9/captcha-laravel
!!!Failed. Does not work with Laravel 11.

Make a new branch in Git:
	git checkout -b CAPTCHA_mewebstudio
Install other laravel-captcha (https://github.com/mewebstudio/captcha):
	composer require mews/captcha
Added CAPTCHA to create a view.
Added CAPTCHA validation rules and messages to StoreCommentRequest.
New commit in CAPTCHA_mewebstudio branch.
Making git fast-forward merge CAPTCHA_mewebstudio and Main branches.

2024.04.25
SORTING. The session is selected as the storage location for sorting data.
Added sorting links to the home page.
Beginning to make sorting by user email.

2024.04.27
Found a problem: MySQL cannot sort a table by a related field of another table (comments by users.email). This is something new for me.

2024.04.28
Found a solution to the problem: using an inner join, combine tables and sort by the user's email field.
Found a problem: eager loading began to load incorrect children sub-comments.

2024.04.29
I continue to look for a solution to the problem.

2024.04.30
Found a solution to the problem: inner join was replacing the comment ID with the user ID, and eager loading is loading child sub-comments with the wrong parent ID. Made changes so that the inner join only attaches the user's email.
Added sorting functionality to the application.

2024.05.01
Re-generate database test data for a more visual sorting result:
	php artisan migrate:fresh --seed
Dumped DB with test data in MYSQL into comments/1-documentation/mysqlDumpDB folder:
	mysqldump -uroot -p comments > comments.sql
Changes have been made to the "Home Page" view to display comments more clearly.

2024.05.02
Added display of the selected comment sorting on the page.
Don’t have time to implement HTML tags in the comments. Leave the work in the 'htmlTags' git branch.

2024.05.03
DESIGN of web application.
Created a basic view from which all other views will be inherited.
Added Logo style.
Using the site app.leonardo.ai generated several images for the background of the site.
Selected several priority images.

2024.05.04
For pagination reused the style of briefnews.dp.ua
Added style for "New comment" and "answer" buttons.
Added style for comment.
Added style for sorting.